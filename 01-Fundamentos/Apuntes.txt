-Los archivos <script> es recomendable que vayan al final del <body>
-el codigo script no se debe hacer en un mismo espacio con el html, es mejor llamar un src con la direccion del archivo .js con todas las funciones script.
-Polyfill= Es un codigo que provee el funcionamiento de una nueva caracteristica de JS (ES6), en versiones viejas como ES5.
-Ccuando el caracter en consola es color gris es un string, si es morado es un numero.
-Se pueden agregar colores y estilos a las letras de la consola importando comandos de css, por 
ejemplo: console.log('%c Mis variables', 'color:green; font-weight: bold');
-Las constantes se les pone nombre en mayusculas: const SUMA= a+b;
-BreakPoint=Punto en que se detiene el programa.
-Si a una variable no se le da un valor, la consola mostrara valor 'undefined'.
-Path=ruta de archivos llamados.
-No utilizar variables de tipo VAR, ya que estas se almacenan en el apartado'window'
 y esto puede causar problemas al sobreescribirse.
-Las referencias que estan en el objeto window no son reconocidas en Node.
-JavaScript es sensible a mayusculas.
**DATOS PRIMITIVOS EN JS**
    -Boolean = true - false
    -Null = sin ningun valor.
    -Undefined = que aun no se le ha asignado valor.
    (- Null y undefined son valores totalmente diferentes).
    -Number = todo lo que tiene que ver con numeros (enteros, dobles, flotantes, etc).
    -String = cadenas de cracteres.
    -Symbol = Es un valor unico que no es igual a ningun otro valor.

-PALABRAS RESERVADAS = palabras que tienen un uso especifico para el cual fueron creadas.
-No se pueden poner nombres a las variables, que empiecen con numeros, ejemplo: let 1abc;
-No es buena practica colocar caracteres especiales como la ñ en los nombres de las variables.
-ARREGLOS = Son un objeto muy parecido a una lista de informacion, que contienen un grupo de elementos.
    -Usualmente la informacion dentro de los arreglos es del mismo tipo de datos.
    -Los metodos son funciones que vienen internas de los arreglos y las propiedades son
        como variables que vienen dentro de todos los arreglos.
    -La propiedad length muestra la cantidad de elementos contenidos en el arreglo.
    -forEach ejecuta una instruccion por cada uno de los elementos del arreglo.
      Se compone asi : forEach((elemento, indice, arreglo)
    El metodo push aniade un nuevo elemento al arreglo y devuelve el nuevo tamanio del arreglo.
    El metodo unshift inserta un nuevo elemento al inicio del arreglo.
    El metodo pop elimina el ultimo elemento del arreglo y lo retorna.
    El metodo splice Elimina elementos de un arreglo y, si es necesario, inserta nuevos elementos en su lugar, 
    devolviendo los elementos eliminados.      
    El metodo indexOf muestra en que lugar del arreglo se encuentra el valor que escribamos, es sencible a 
    mayusculas. Si muestra el valor -1 significa que no encontro el valor.

OBJETOS LITERALES 
-Los objetos literales son objetos que tienen pares de valores.
-Cuando se imprimen los elementos de un objeto se imprimen en orden alfabetico, 
    no importa el orden en que los hayamos creado.
-Si se desea colocar un nombre espaciado a algun elemento del arreglo, se debe colocar entre comillas simples,
    ya que JS no permite uso de caracteres especiales en los nombres.  
-Para elliminar una propiedad de un objeto solo se debe colocar la palabra delete antes del llamado de la propiedad.
    ejemplo: delete personaje.edad.
-Object.entries permite manejar un objeto como si fuera un arreglo.
-Para bloquear modificaciones de las propiedades del objeto se debe realizar la 
 siguiente consulta: Object.freeze(personaje).
-listar todas las propiedades que tiene el objeto: 
    const propiedades = Object.getOwnPropertyNames(personaje).
-listar todas las propiedades (solo nombres) que tiene el objeto**
    const propiedades = Object.getOwnPropertyNames(personaje)//solo nombres
    const valores     = Object.values(personaje)//solo valores
    console.log(propiedades)
    console.log(valores)     

FUNCIONES

-Su objetivo principal es centralizar la logica de un procedimiento que se puede
 repetir varias veces.
-Los parentesis () son un indicativo de que es una funcion.
-Es buena practica que las definiciones de las funciones siempre esten arriba y el llamado de estas 
 este abajo.
-cuando  la funcion no tenga un return explicitu, retornará undeffined

PROTIP-RETORNO
-Cuando las propiedades de un objeto y los parametros de la funcion sean homonimos
 se puede evitar : nombre: nombre,  y usar solo nombre,  ver ejemplo en crearPersona()
-La funcion flecha no maneja el objeto 'arguments' 

REFERENCIAS
-El Parametro Spread separa los elementos, a diferencia del parametro rest '...' que une los elementos 
  contenidos entre parentesis, ver ejemplo en protip-retorno.js
  --Este parametro se usa para romper las referencias de JS, para poder trabajar objetos, hacer igualaciones que
    apunten a diferentes espacios en memoria.
-El metodo slice() tambien separa los elementos y regresa los elementos que se especifiquen. 

FUNCION IF-ELSE
-La duncion if() espera un valor booleano.

LOGICA BOOLEANA => Ver logica-booleana.js

OPERADOR CONDICIONAL TERNARIO

- Para concatenar elementos es mejor usar '${}' dentro de los simbolos ``, ejemplo:
  `La suma es: ${resultado}`;....el simbolo + ya no se recomienda usar por problemas en casos
   cuando hay numeros en ambos extremos y no se requiere sumar.
- Includes es un metodo que tienen los arreglos para preguntar si algo existe dentro
   del arreglo.    


VER IRONLADY


